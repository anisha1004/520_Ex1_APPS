{"problem_id": 1079, "difficulty": "interview", "question": "Valera considers a number beautiful, if it equals 2^{k} or -2^{k} for some integer k (k ≥ 0). Recently, the math teacher asked Valera to represent number n as the sum of beautiful numbers. As Valera is really greedy, he wants to complete the task using as few beautiful numbers as possible. \n\nHelp Valera and find, how many numbers he is going to need. In other words, if you look at all decompositions of the number n into beautiful summands, you need to find the size of the decomposition which has the fewest summands.\n\n\n-----Input-----\n\nThe first line contains string s (1 ≤ |s| ≤ 10^6), that is the binary representation of number n without leading zeroes (n > 0).\n\n\n-----Output-----\n\nPrint a single integer — the minimum amount of beautiful numbers that give a total of n.\n\n\n-----Examples-----\nInput\n10\n\nOutput\n1\n\nInput\n111\n\nOutput\n2\n\nInput\n1101101\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample n = 2 is a beautiful number.\n\nIn the second sample n = 7 and Valera can decompose it into sum 2^3 + ( - 2^0).\n\nIn the third sample n = 109 can be decomposed into the sum of four summands as follows: 2^7 + ( - 2^4) + ( - 2^2) + 2^0.", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"10\\n\",\n    \"111\\n\",\n    \"1101101\\n\",\n    \"1100\\n\",\n    \"11010\\n\",\n    \"110100\\n\",\n    \"1011001\\n\",\n    \"1010111\\n\",\n    \"1011101\\n\",\n    \"1101011001101110000000010000011111110100010000100011101010110100010010011110101001011111111001100011\\n\",\n    \"1\\n\",\n    \"11\\n\",\n    \"110\\n\",\n    \"110110011010110101101010111010010010101001001010000110111111000100\\n\",\n    \"11110010111010111000000111010101011100001100100100110100101110011111001100010\\n\",\n    \"1001110101111000111010100110111000000110011011100111001111100001110011011001101110000000\\n\",\n    \"111100010110110001011000100110100101100011101111111111000011100101110001000101101100110111101101110\\n\",\n    \"10110100101\\n\",\nn\",\n    \"1111111111\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"101111110100100010101000110011010110001101011111100111001011011011010001010010100100101011100000001010000111001000110101001011000010011101010010110101000000101011000000001101000001010000000000001011000000101110001010110110010111010010110100010111100010110110100110101001000010101101011011000011111001110001000000110101010100001001110\\n\",\n    \"10101010101010101010101010101010101010101010101010\\n\",\n    \"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\\n\",\n    \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"32\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"24\\n\",\n    \"28\\n\",\n    \"29\\n\",\n    \"34\\n\",\n    \"6\\n\",\n    \"167\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"119\\n\",\n    \"25\\n\",\n    \"50\\n\",\n    \"250\\n\"\n  ]\n}"}
{"problem_id": 771, "difficulty": "interview", "question": "You are given a multiset of n integers. You should select exactly k of them in a such way that the difference between any two of them is divisible by m, or tell that it is impossible.\n\nNumbers can be repeated in the original multiset and in the multiset of selected numbers, but number of occurrences of any number in multiset of selected numbers should not exceed the number of its occurrences in the original multiset. \n\n\n-----Input-----\n\nFirst line contains three integers n, k and m (2 ≤ k ≤ n ≤ 100 000, 1 ≤ m ≤ 100 000) — number of integers in the multiset, number of integers you should select and the required divisor of any pair of selected integers.\n\nSecond line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — the numbers in the multiset.\n\n\n-----Output-----\n\nIf it is not possible to select k numbers in the desired way, output «No» (without the quotes).\n\nOtherwise, in the first line of output print «Yes» (without the quotes). In the second line print k integers b_1, b_2, ..., b_{k} — the selected numbers. If there are multiple possible solutions, print any of them. \n\n\n-----Examples-----\nInput\n3 2 3\n1 8 4\n\nOutput\nYes\n1 4 \nInput\n3 3 3\n1 8 4\n\nOutput\nNo\nInput\n4 3 5\n2 7 7 7\n\nOutput\nYes\n2 7 7", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"3 2 3\\n1 8 4\\n\",\n    \"3 3 3\\n1 8 4\\n\",\n    \"4 3 5\\n2 7 7 7\\n\",\n    \"9 9 5\\n389149775 833127990 969340400 364457730 48649145 316121525 640054660 924273385 973207825\\n\",\n    \"15 8 10\\n216175135 15241965 611723934 987180005 151601897 403701727 533996295 207637446 875331635 46172555 604086315 350146655 401084142 156540458 982110455\\n\",\n    \"2 2 100000\\n0 1\\n\",\n    \"101 25 64\\n451 230 14 53 7 520 709 102 678 358 166 870 807 230 230 279 166 230 765 176 742 358 924 976 647 806 870 473 976 994 750 146 802 224 503 801 105 614 882 203 390 338 29 587 214 213 405 806 102 102 621 358 521 742 678 205 309 871 796 326 162 693 268 486 68 627 304 829 806 623 748 934 714 672 712 614 587 589 846 260 593 85 839 257 711 395 336 358 472 133 324 527 599 5 845 920 989 494 358 70 882\\n\",\n    \"108 29 72\\n738 619 711 235 288 288 679 36 785 233 706 71 216 144 216 781 338 583 495 648 144 432 72 720 541 288 158 328 154 202 10 533 635 176 707 216 314 397 440 142 326 458 568 701 745 144 61 634 520 720 744 144 409 127 526 476 101 469 72 432 738 432 235 641 695 276 144 144 231 555 630 9 109 319 437 288 288 317 453 432 601 0 449 576 743 352 333 504 504 369 228 288 381 142 500 72 297 359 230 773 216 576 144 244 437 772 483 51\\n\",\n    \"8 2 6\\n750462183 165947982 770714338 368445737 363145692 966611485 376672869 678687947\\n\",\n    \"12 2 1\\n512497388 499105388 575265677 864726520 678272195 667107176 809432109 439696443 770034376 873126825 690514828 541499950\\n\",\n    \"9 3 1\\n506004039 471451660 614118177 518013571 43210072 454727076 285905913 543002174 298515615\\n\",\n    \"8 4 6\\n344417267 377591123 938158786 682031413 804153975 89006697 275945670 735510539\\n\",\n    \"8 8 1\\n314088413 315795280 271532387 241073087 961218399 884234132 419866508 286799253\\n\",\n    \"7 7 1\\n0 0 0 0 0 0 0\\n\",\n    \"11 4 3\\n0 1 0 1 1 0 0 0 0 0 0\\n\",\n    \"13 4 4\\n1 1 0 3 2 4 1 0 3 4 2 4 3\\n\",\n    \"5 5 1\\n6 4 6 0 4\\n\",\n    \"3 2 3\\n1 2 3\\n\",\n    \"6 3 4\\n5 9 10 6 7 8\\n\",\n    \"4 4 3\\n4 7 2 5\\n\",\n    \"4 2 6\\n5 5 5 5\\n\",\n    \"4 3 3\\n5 1 4 7\\n\",\n    \"4 3 10\\n0 1 11 11\\n\",\n    \"5 2 4\\n1 2 2 2 2\\n\",\n    \"5 5 9\\n8 17 26 35 44\\n\",\n    \"3 2 2\\n1 2 4\\n\",\n    \"5 4 2\\n1 3 6 10 12\\n\",\n    \"3 2 4\\n1 2 3\\n\",\n    \"8 3 5\\n1 2 3 4 1 2 3 4\\n\",\n    \"5 2 9\\n8 8 8 8 8\\n\",\n    \"3 3 3\\n1 3 6\\n\",\n    \"5 2 10\\n4 5 6 19 29\\n\",\n    \"5 3 3\\n3 6 4 7 10\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n1 4 \",\n    \"No\",\n    \"Yes\\n2 7 7 \",\n    \"Yes\\n389149775 833127990 969340400 364457730 48649145 316121525 640054660 924273385 973207825 \",\n    \"Yes\\n216175135 15241965 987180005 533996295 875331635 46172555 604086315 350146655 \",\n    \"No\",\n    \"Yes\\n230 102 678 358 166 870 230 230 166 230 742 358 806 870 614 806 102 102 358 742 678 486 806 934 614 \",\n    \"Yes\\n288 288 216 144 216 648 144 432 72 720 288 216 144 720 144 72 432 432 144 144 288 288 432 0 576 504 504 288 72 \",\n    \"Yes\\n165947982 363145692 \",\n    \"Yes\\n512497388 499105388 \",\n    \"Yes\\n506004039 471451660 614118177 \",\n    \"No\",\n    \"Yes\\n314088413 315795280 271532387 241073087 961218399 884234132 419866508 286799253 \",\n    \"Yes\\n0 0 0 0 0 0 0 \",\n    \"Yes\\n0 0 0 0 \",\n    \"Yes\\n0 4 0 4 \",\n    \"Yes\\n6 4 6 0 4 \",\n    \"No\",\n    \"No\",\n    \"No\",\n    \"Yes\\n5 5 \",\n    \"Yes\\n1 4 7 \",\n    \"Yes\\n1 11 11 \",\n    \"Yes\\n2 2 \",\n    \"Yes\\n8 17 26 35 44 \",\n    \"Yes\\n2 4 \",\n    \"No\",\n    \"No\",\n    \"No\",\n    \"Yes\\n8 8 \",\n    \"No\",\n    \"Yes\\n19 29 \",\n    \"Yes\\n4 7 10 \"\n  ]\n}"}
{"problem_id": 3040, "difficulty": "competition", "question": "Given an input string composed solely of lowercase English letters, find the longest substring that occurs more than once in the input string. The two occurrences are allowed to partially overlap.\n\n-----Input-----\nThe input is a single line containing a string of lowercase letters. The string contains more than one character, but no more than $10^5$. At least one letter will appear at least twice.\n\n-----Output-----\nPrint a single line of output: the longest substring that occurs more than once in the input string. If there are multiple longest repeated substrings, print the one the would come first when the longest substrings are sorted in lexicographical (alphabetical) order.\n\n-----Examples-----\nSample Input 1:\nabcefgabc\nSample Output 1:\nabc\n\nSample Input 2:\nabcbabcba\nSample Output 2:\nabcba\n\nSample Input 3:\naaaa\nSample Output 3:\naaa", "starter_code": "", "input_output": "{\n    \"inputs\": [\n        \"abcefgabc\\n\",\n        \"abcbabcba\\n\",\n        \"aaaa\\n\",\n        \"bbcaadbbeaa\\n\"\n    ],\n    \"outputs\": [\n        \"abc\\n\",\n        \"abcba\\n\",\n        \"aaa\\n\",\n        \"aa\\n\"\n    ]\n}"}
{"problem_id": 4655, "difficulty": "introductory", "question": "Alice and Bob have received three big piles of candies as a gift. Now they want to divide these candies as fair as possible. To do this, Alice takes one pile of candies, then Bob takes one of the other two piles. The last pile is split between Alice and Bob as they want: for example, it is possible that Alice takes the whole pile, and Bob gets nothing from it.\n\nAfter taking the candies from the piles, if Alice has more candies than Bob, she discards some candies so that the number of candies she has is equal to the number of candies Bob has. Of course, Bob does the same if he has more candies.\n\nAlice and Bob want to have as many candies as possible, and they plan the process of dividing candies accordingly. Please calculate the maximum number of candies Alice can have after this division process (of course, Bob will have the same number of candies).\n\nYou have to answer $q$ independent queries.\n\nLet's see the following example: $[1, 3, 4]$. Then Alice can choose the third pile, Bob can take the second pile, and then the only candy from the first pile goes to Bob — then Alice has $4$ candies, and Bob has $4$ candies.\n\nAnother example is $[1, 10, 100]$. Then Alice can choose the second pile, Bob can choose the first pile, and candies from the third pile can be divided in such a way that Bob takes $54$ candies, and Alice takes $46$ candies. Now Bob has $55$ candies, and Alice has $56$ candies, so she has to discard one candy — and after that, she has $55$ candies too.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 1000$) — the number of queries. Then $q$ queries follow.\n\nThe only line of the query contains three integers $a, b$ and $c$ ($1 \\le a, b, c \\le 10^{16}$) — the number of candies in the first, second and third piles correspondingly.\n\n\n-----Output-----\n\nPrint $q$ lines. The $i$-th line should contain the answer for the $i$-th query — the maximum number of candies Alice can have after the division, if both Alice and Bob act optimally (of course, Bob will have the same number of candies).\n\n\n-----Example-----\nInput\n4\n1 3 4\n1 10 100\n10000000000000000 10000000000000000 10000000000000000\n23 34 45\n\nOutput\n4\n55\n15000000000000000\n51", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\",\n    \"1\\n111 2 3\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n55\\n15000000000000000\\n51\\n\",\n    \"58\\n\"\n  ]\n}"}
{"problem_id": 4245, "difficulty": "introductory", "question": "Takahashi's house has only one socket.\nTakahashi wants to extend it with some number of power strips, each with A sockets, into B or more empty sockets.\nOne power strip with A sockets can extend one empty socket into A empty sockets.\nFind the minimum number of power strips required.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq A \\leq 20\n - 1 \\leq B \\leq 20\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nPrint the minimum number of power strips required.\n\n-----Sample Input-----\n4 10\n\n-----Sample Output-----\n3\n\n3 power strips, each with 4 sockets, extend the socket into 10 empty sockets.", "starter_code": "", "input_output": "{\"inputs\": [\"4 10\\n\", \"8 9\\n\", \"8 8\\n\", \"4 12\\n\", \"9 12\\n\", \"13 17\\n\", \"3 17\\n\", \"10 19\\n\", \"6 11\\n\", \"20 19\\n\", \"10 6\\n\", \"2 20\\n\", \"2 1\\n\", \"20 1\\n\"], \"outputs\": [\"3\\n\", \"2\\n\", \"1\\n\", \"4\\n\", \"2\\n\", \"2\\n\", \"8\\n\", \"2\\n\", \"2\\n\", \"1\\n\", \"1\\n\", \"19\\n\", \"0\\n\", \"0\\n\"]}"}
{"problem_id": 747, "difficulty": "interview", "question": "The hero of the Cut the Rope game is a little monster named Om Nom. He loves candies. And what a coincidence! He also is the hero of today's problem. [Image] \n\nOne day, Om Nom visited his friend Evan. Evan has n candies of two types (fruit drops and caramel drops), the i-th candy hangs at the height of h_{i} centimeters above the floor of the house, its mass is m_{i}. Om Nom wants to eat as many candies as possible. At the beginning Om Nom can make at most x centimeter high jumps. When Om Nom eats a candy of mass y, he gets stronger and the height of his jump increases by y centimeters.\n\nWhat maximum number of candies can Om Nom eat if he never eats two candies of the same type in a row (Om Nom finds it too boring)?\n\n\n-----Input-----\n\nThe first line contains two integers, n and x (1 ≤ n, x ≤ 2000) — the number of sweets Evan has and the initial height of Om Nom's jump. \n\nEach of the following n lines contains three integers t_{i}, h_{i}, m_{i} (0 ≤ t_{i} ≤ 1; 1 ≤ h_{i}, m_{i} ≤ 2000) — the type, height and the mass of the i-th candy. If number t_{i} equals 0, then the current candy is a caramel drop, otherwise it is a fruit drop.\n\n\n-----Output-----\n\nPrint a single integer — the maximum number of candies Om Nom can eat.\n\n\n-----Examples-----\nInput\n5 3\n0 2 4\n1 3 1\n0 8 3\n0 20 10\n1 5 5\n\nOutput\n4\n\n\n\n-----Note-----\n\nOne of the possible ways to eat 4 candies is to eat them in the order: 1, 5, 3, 2. Let's assume the following scenario:  Initially, the height of Om Nom's jump equals 3. He can reach candies 1 and 2. Let's assume that he eats candy 1. As the mass of this candy equals 4, the height of his jump will rise to 3 + 4 = 7.  Now Om Nom can reach candies 2 and 5. Let's assume that he eats candy 5. Then the height of his jump will be 7 + 5 = 12.  At this moment, Om Nom can reach two candies, 2 and 3. He won't eat candy 2 as its type matches the type of the previously eaten candy. Om Nom eats candy 3, the height of his jump is 12 + 3 = 15.  Om Nom eats candy 2, the height of his jump is 15 + 1 = 16. He cannot reach candy 4.", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"5 3\\n0 2 4\\n1 3 1\\n0 8 3\\n0 20 10\\n1 5 5\\n\",\n    \"5 2\\n1 15 2\\n1 11 2\\n0 17 2\\n0 16 1\\n1 18 2\\n\",\n    \"6 2\\n1 17 3\\n1 6 1\\n0 4 2\\n1 10 1\\n1 7 3\\n1 5 1\\n\",\n    \"7 2\\n1 14 1\\n1 9 2\\n0 6 3\\n0 20 2\\n0 4 2\\n0 3 1\\n0 9 2\\n\",\n    \"8 2\\n0 20 3\\n1 5 2\\n1 4 1\\n1 7 1\\n0 1 3\\n1 5 3\\n1 7 2\\n1 3 1\\n\",\n    \"9 2\\n0 1 1\\n1 8 2\\n1 11 1\\n0 9 1\\n1 18 2\\n1 7 3\\n1 8 3\\n0 16 1\\n0 12 2\\n\",\n    \"10 2\\n0 2 3\\n1 5 2\\n0 7 3\\n1 15 2\\n0 14 3\\n1 19 1\\n1 5 3\\n0 2 2\\n0 10 2\\n0 10 3\\n\",\n    \"2 1\\n0 1 1\\n1 2 1\\n\",\n    \"2 1\\n1 1 1\\n0 2 1\\n\",\n    \"2 1\\n0 1 1\\n0 2 1\\n\",\n    \"2 1\\n1 1 1\\n1 2 1\\n\",\n    \"2 1\\n0 1 1\\n1 3 1\\n\",\n    \"2 1\\n1 1 1\\n0 3 1\\n\",\n    \"1 1\\n1 2 1\\n\",\n    \"3 4\\n1 1 2\\n1 4 100\\n0 104 1\\n\",\n    \"3 4\\n1 1 100\\n1 4 2\\n0 104 1\\n\",\n    \"3 100\\n0 1 1\\n1 1 1\\n1 1 1\\n\",\n    \"4 20\\n0 10 10\\n0 20 50\\n1 40 1\\n1 40 1\\n\",\n    \"4 2\\n0 1 1\\n0 2 3\\n1 4 1\\n1 5 1\\n\",\n    \"3 10\\n0 9 1\\n0 10 10\\n1 20 1\\n\",\n    \"3 5\\n0 4 1\\n0 5 10\\n1 15 5\\n\",\n    \"3 4\\n0 2 1\\n0 3 3\\n1 6 5\\n\",\n    \"3 3\\n0 1 1\\n0 2 100\\n1 10 1\\n\",\n    \"3 2\\n0 1 1\\n0 2 2\\n1 4 4\\n\",\n    \"5 3\\n0 1 5\\n0 1 5\\n0 1 5\\n1 1 10\\n1 1 1\\n\",\n    \"3 2\\n0 1 1\\n0 2 2\\n1 4 2\\n\",\n    \"4 10\\n0 20 1\\n1 1 9\\n1 2 11\\n1 3 8\\n\",\n    \"7 1\\n0 1 99\\n1 100 1\\n0 100 1\\n0 101 1000\\n1 1000 1\\n0 1000 1\\n1 1000 1\\n\",\n    \"4 3\\n0 1 1\\n0 2 100\\n0 3 1\\n1 100 1\\n\",\n    \"3 3\\n0 1 100\\n0 2 1\\n1 100 100\\n\",\n    \"3 2\\n0 1 1\\n0 2 100\\n1 10 1\\n\",\n    \"3 1\\n0 1 1\\n1 1 5\\n0 7 1\\n\",\n    \"3 5\\n0 2 3\\n1 9 10\\n0 4 4\\n\",\n    \"3 3\\n0 2 1\\n0 3 2\\n1 5 10\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\"\n  ]\n}"}
{"problem_id": 1303, "difficulty": "interview", "question": "Little X and Little Z are good friends. They always chat online. But both of them have schedules.\n\nLittle Z has fixed schedule. He always online at any moment of time between a_1 and b_1, between a_2 and b_2, ..., between a_{p} and b_{p} (all borders inclusive). But the schedule of Little X is quite strange, it depends on the time when he gets up. If he gets up at time 0, he will be online at any moment of time between c_1 and d_1, between c_2 and d_2, ..., between c_{q} and d_{q} (all borders inclusive). But if he gets up at time t, these segments will be shifted by t. They become [c_{i} + t, d_{i} + t] (for all i).\n\nIf at a moment of time, both Little X and Little Z are online simultaneosly, they can chat online happily. You know that Little X can get up at an integer moment of time between l and r (both borders inclusive). Also you know that Little X wants to get up at the moment of time, that is suitable for chatting with Little Z (they must have at least one common moment of time in schedules). How many integer moments of time from the segment [l, r] suit for that?\n\n\n-----Input-----\n\nThe first line contains four space-separated integers p, q, l, r (1 ≤  p, q ≤ 50; 0 ≤ l ≤ r ≤ 1000).\n\nEach of the next p lines contains two space-separated integers a_{i}, b_{i} (0 ≤ a_{i} < b_{i} ≤ 1000). Each of the next q lines contains two space-separated integers c_{j}, d_{j} (0 ≤ c_{j} < d_{j} ≤ 1000).\n\nIt's guaranteed that b_{i} < a_{i} + 1 and d_{j} < c_{j} + 1 for all valid i and j.\n\n\n-----Output-----\n\nOutput a single integer — the number of moments of time from the segment [l, r] which suit for online conversation.\n\n\n-----Examples-----\nInput\n1 1 0 4\n2 3\n0 1\n\nOutput\n3\n\nInput\n2 3 0 20\n15 17\n23 26\n1 4\n7 11\n15 17\n\nOutput\n20", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"1 1 0 4\\n2 3\\n0 1\\n\",\n    \"2 3 0 20\\n15 17\\n23 26\\n1 4\\n7 11\\n15 17\\n\",\n    \"5 2 27 452\\n148 154\\n421 427\\n462 470\\n777 786\\n969 978\\n245 247\\n313 322\\n\",\n    \"3 6 25 785\\n273 275\\n391 397\\n775 783\\n84 89\\n348 354\\n480 483\\n552 556\\n711 716\\n838 844\\n\",\n    \"1 6 364 421\\n649 688\\n31 39\\n438 441\\n516 524\\n609 615\\n708 710\\n850 851\\n\",\n    \"7 10 87 239\\n8 23\\n325 374\\n516 540\\n633 658\\n728 742\\n833 839\\n960 995\\n99 114\\n213 232\\n264 269\\n321 327\\n492 540\\n551 559\\n587 590\\n625 637\\n704 723\\n750 764\\n\",\n    \"33 17 295 791\\n41 49\\n66 73\\n95 102\\n118 126\\n157 158\\n189 198\\n228 237\\n247 251\\n301 307\\n318 326\\n328 333\\n356 363\\n373 381\\n454 460\\n463 466\\n471 477\\n500 501\\n505 510\\n559 566\\n585 588\\n597 604\\n675 684\\n688 695\\n699 705\\n749 755\\n780 788\\n869 873\\n879 888\\n890 892\\n909 918\\n953 954\\n973 978\\n993 996\\n53 60\\n68 74\\n102 105\\n149 153\\n191 206\\n230 242\\n249 252\\n320 325\\n483 488\\n509 513\\n523 524\\n544 560\\n651 655\\n670 672\\n691 708\\n742 748\\n920 939\\n\",\n    \"5 4 520 527\\n257 263\\n309 315\\n434 439\\n540 541\\n759 763\\n168 176\\n313 316\\n546 548\\n880 881\\n\",\n    \"11 40 58 976\\n14 22\\n85 92\\n110 112\\n173 181\\n188 190\\n212 218\\n494 498\\n530 531\\n647 656\\n943 948\\n960 968\\n2 16\\n20 31\\n40 86\\n90 91\\n93 96\\n103 118\\n128 155\\n170 173\\n176 192\\n205 207\\n210 217\\n237 245\\n250 280\\n302 304\\n311 328\\n332 376\\n387 419\\n422 442\\n449 454\\n462 491\\n496 498\\n501 516\\n525 552\\n556 565\\n567 573\\n577 578\\n586 635\\n651 677\\n688 699\\n704 714\\n718 719\\n733 766\\n768 769\\n773 811\\n822 826\\n830 870\\n885 917\\n937 961\\n971 981\\n991 1000\\n\",\n    \"10 28 435 847\\n48 57\\n86 95\\n186 188\\n297 304\\n500 506\\n594 600\\n602 609\\n802 811\\n906 911\\n916 921\\n20 22\\n115 118\\n139 141\\n170 171\\n184 188\\n193 197\\n227 230\\n232 235\\n250 252\\n256 260\\n271 275\\n322 324\\n326 328\\n379 381\\n433 434\\n528 529\\n563 565\\n583 584\\n614 615\\n617 619\\n631 632\\n726 729\\n750 754\\n814 817\\n853 855\\n881 882\\n946 947\\n981 984\\n\",\n    \"13 42 292 733\\n304 308\\n362 365\\n396 397\\n686 688\\n719 722\\n815 816\\n901 902\\n904 905\\n921 924\\n929 933\\n953 954\\n977 980\\n982 985\\n28 30\\n36 37\\n108 112\\n123 127\\n134 135\\n151 153\\n160 162\\n203 205\\n208 212\\n240 243\\n261 264\\n271 274\\n294 297\\n356 358\\n383 385\\n408 412\\n415 418\\n435 439\\n444 447\\n500 502\\n507 511\\n515 519\\n525 529\\n541 543\\n566 569\\n577 579\\n606 609\\n618 622\\n655 656\\n715 718\\n744 745\\n767 771\\n798 802\\n828 830\\n839 840\\n842 845\\n893 894\\n897 898\\n902 906\\n958 960\\n981 983\\n988 992\\n\",\n    \"5 46 211 943\\n367 371\\n405 408\\n639 642\\n821 825\\n974 978\\n13 14\\n31 34\\n36 39\\n48 51\\n82 86\\n173 174\\n193 196\\n227 230\\n249 250\\n259 261\\n292 294\\n325 327\\n329 330\\n352 353\\n380 383\\n390 391\\n398 399\\n411 414\\n418 420\\n424 427\\n478 479\\n488 489\\n500 502\\n511 514\\n534 535\\n548 552\\n581 584\\n596 600\\n609 611\\n618 622\\n641 642\\n656 657\\n674 678\\n707 709\\n718 720\\n746 748\\n752 755\\n771 773\\n775 777\\n865 869\\n892 896\\n910 911\\n946 948\\n963 964\\n977 978\\n986 990\\n\",\n    \"1 8 169 472\\n63 553\\n32 65\\n75 204\\n263 277\\n289 326\\n342 441\\n452 911\\n945 956\\n971 986\\n\",\n    \"2 1 17 179\\n159 202\\n579 602\\n115 126\\n\",\n    \"1 1 0 1000\\n0 1000\\n0 1000\\n\",\n    \"10 11 201 515\\n2 3\\n102 103\\n202 203\\n302 304\\n401 402\\n502 503\\n600 603\\n701 702\\n800 803\\n900 902\\n1 2\\n103 104\\n201 202\\n302 304\\n400 404\\n501 504\\n600 601\\n603 604\\n701 704\\n800 801\\n900 902\\n\",\n    \"1 7 140 478\\n400 404\\n3 4\\n100 105\\n301 304\\n403 405\\n504 506\\n600 605\\n904 906\\n\",\n    \"9 8 453 552\\n5 18\\n23 28\\n125 132\\n208 209\\n215 230\\n516 527\\n808 819\\n906 913\\n926 929\\n4 18\\n221 229\\n316 330\\n403 424\\n506 516\\n805 828\\n904 914\\n916 917\\n\",\n    \"9 1 24 52\\n63 94\\n150 164\\n244 275\\n379 385\\n413 420\\n441 490\\n506 545\\n614 661\\n752 776\\n531 534\\n\",\n    \"1 1 0 0\\n1 3\\n2 5\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"20\\n\",\n    \"54\\n\",\n    \"99\\n\",\n    \"0\\n\",\n    \"151\\n\",\n    \"497\\n\",\n    \"0\\n\",\n    \"909\\n\",\n    \"284\\n\",\n    \"412\\n\",\n    \"428\\n\",\n    \"304\\n\",\n    \"55\\n\",\n    \"1001\\n\",\n    \"26\\n\",\n    \"16\\n\",\n    \"49\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}"}
{"problem_id": 203, "difficulty": "interview", "question": "There are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n\n-----Examples-----\nInput\n5\nDDRRR\n\nOutput\nD\n\nInput\n6\nDDRRRR\n\nOutput\nR\n\n\n\n-----Note-----\n\nConsider one of the voting scenarios for the first sample:   Employee 1 denies employee 5 to vote.  Employee 2 denies employee 3 to vote.  Employee 3 has no right to vote and skips his turn (he was denied by employee 2).  Employee 4 denies employee 2 to vote.  Employee 5 has no right to vote and skips his turn (he was denied by employee 1).  Employee 1 denies employee 4.  Only employee 1 now has the right to vote so the voting ends with the victory of depublicans.", "starter_code": "", "input_output": "{\n  \"inputs\": [\n    \"5\\nDDRRR\\n\",\n    \"6\\nDDRRRR\\n\",\n    \"1\\nD\\n\",\n    \"1\\nR\\n\",\n    \"2\\nDR\\n\",\n    \"3\\nRDD\\n\",\n    \"3\\nDRD\\n\",\n    \"4\\nDRRD\\n\",\n    \"4\\nDRRR\\n\",\n    \"4\\nRDRD\\n\",\n    \"5\\nDRDRR\\n\",\n    \"4\\nRRRR\\n\",\n    \"5\\nRDDRD\\n\",\n    \"5\\nDDRRD\\n\",\n    \"5\\nDRRRD\\n\",\n    \"5\\nDDDDD\\n\",\n    \"6\\nDRRDDR\\n\",\n    \"7\\nRDRDRDD\\n\",\n    \"7\\nRDRDDRD\\n\",\n    \"7\\nRRRDDDD\\n\",\n    \"8\\nRRRDDDDD\\n\",\n    \"9\\nRRRDDDDDR\\n\",\n    \"9\\nRRDDDRRDD\\n\",\n    \"9\\nRRDDDRDRD\\n\",\n    \"10\\nDDRRRDRRDD\\n\",\n    \"11\\nDRDRRDDRDDR\\n\",\n    \"12\\nDRDRDRDRRDRD\\n\",\n    \"13\\nDRDDDDRRRRDDR\\n\",\n    \"14\\nDDRDRRDRDRDDDD\\n\",\n    \"15\\nDDRRRDDRDRRRDRD\\n\",\n    \"50\\nDDDRDRDDDDRRRRDDDDRRRDRRRDDDRRRRDRDDDRRDRRDDDRDDDD\\n\",\n    \"50\\nDRDDDDDDDRDRDDRRRDRDRDRDDDRRDRRDRDRRDDDRDDRDRDRDDR\\n\",\n    \"100\\nRDRRDRDDDDRDRRDDRDRRDDRRDDRRRDRRRDDDRDDRDDRRDRDRRRDRDRRRDRRDDDRDDRRRDRDRRRDDRDRDDDDDDDRDRRDDDDDDRRDD\\n\",\n    \"100\\nRRDRRDDDDDDDRDRRRDRDRDDDRDDDRDDRDRRDRRRDRRDRRRRRRRDRRRRRRDDDRRDDRRRDRRRDDRRDRRDDDDDRRDRDDRDDRRRDRRDD\\n\",\n    \"6\\nRDDRDR\\n\",\n    \"6\\nDRRDRD\\n\",\n    \"8\\nDDDRRRRR\\n\",\n    \"7\\nRRRDDDD\\n\",\n    \"7\\nRDDRRDD\\n\",\n    \"9\\nRDDDRRDRR\\n\",\n    \"5\\nRDRDD\\n\",\n    \"5\\nRRDDD\\n\",\n    \"8\\nRDDRDRRD\\n\",\n    \"10\\nDRRRDDRDRD\\n\",\n    \"7\\nDRRDDRR\\n\",\n    \"12\\nRDDDRRDRRDDR\\n\",\n    \"7\\nRDRDDDR\\n\",\n    \"7\\nDDRRRDR\\n\",\n    \"10\\nDRRDRDRDRD\\n\",\n    \"21\\nDDDDRRRRRDRDRDRDRDRDR\\n\",\n    \"11\\nRDDDDDRRRRR\\n\",\n    \"10\\nRDDDRRRDDR\\n\",\n    \"4\\nRDDR\\n\",\n    \"7\\nRDRDDRD\\n\",\n    \"8\\nRDDDRRRD\\n\",\n    \"16\\nDRRDRDRDRDDRDRDR\\n\",\n    \"8\\nDRRDRDRD\\n\",\n    \"6\\nRDDDRR\\n\",\n    \"10\\nDDRRRRRDDD\\n\",\n    \"7\\nDDRRRRD\\n\",\n    \"12\\nRDDRDRDRRDRD\\n\",\n    \"9\\nDDRRRDRDR\\n\",\n    \"20\\nRDDRDRDRDRRDRDRDRDDR\\n\",\n    \"7\\nRRDDDRD\\n\",\n    \"12\\nDRRRRRRDDDDD\\n\",\n    \"12\\nRDRDDRDRDRDR\\n\",\n    \"6\\nDDDDDD\\n\",\n    \"10\\nRRRDDRDDDD\\n\",\n    \"40\\nRDDDRDDDRDRRDRDRRRRRDRDRDRDRRDRDRDRRDDDD\\n\",\n    \"50\\nRRDDDRRDRRRDDRDDDDDRDDRRRRRRDRDDRDDDRDRRDDRDDDRDRD\\n\",\n    \"5\\nRDRDR\\n\",\n    \"9\\nDRRDRDDRR\\n\",\n    \"6\\nDRRRDD\\n\",\n    \"10\\nDDDDRRRRRR\\n\",\n    \"9\\nRRDDDDRRD\\n\"\n  ],\n  \"outputs\": [\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\"\n  ]\n}"}
{"problem_id": 3177, "difficulty": "competition", "question": "“Arrange” is a planetary popular Flash game. In “Arrange” the player is given a permutation of numbers $1$ to $N$ and a list of allowed swaps. He then has to perform a sequence of swaps that transforms the initial permutation back to the ordered sequence $1,2,3,4,5, \\ldots , N$.\n\nIn order to break the high score list, you need to perform the minimum amount of swaps possible. You can’t do that, but you can write a program that does it for you!\n\n-----Input-----\nThe first line of input contains two integers, $N$ ($2 \\le N \\le 11$), the length of the initial sequence and $M$ ($1 \\le M \\le N(N – 1) / 2$), the number of allowed swaps.\n\nThe second line of input contains a permutation of the numbers $1$ to $N$.\n\nThe next $M$ lines contain descriptions of allowed swaps. Each such line contains two distinct numbers $1 \\le A < B \\le N$, indicating that you are allowed to swap the $A$-th number in the sequence with the $B$-th number. The input never contains two identical swaps.\n\nYou may assume that the input is such that a solution exists.\n\n-----Output-----\nOutput the minimum possible number of swaps to transform the permutation to $1, 2, \\ldots , N$.\n\n-----Examples-----\nSample Input 1:\n2 1\n2 1\n1 2\nSample Output 1:\n1\n\nSample Input 2:\n3 2\n2 1 3\n1 3\n2 3\nSample Output 2:\n3", "starter_code": "", "input_output": "{\n    \"inputs\": [\n        \"2 1\\n2 1\\n1 2\\n\",\n        \"3 2\\n2 1 3\\n1 3\\n2 3\\n\",\n        \"5 5\\n1 2 3 4 5\\n1 5\\n2 5\\n1 4\\n1 2\\n3 5\\n\"\n    ],\n    \"outputs\": [\n        \"1\\n\",\n        \"3\\n\",\n        \"0\\n\"\n    ]\n}"}
{"problem_id": 4559, "difficulty": "introductory", "question": "Given N integers A_1, ..., A_N, compute A_1 \\times ... \\times A_N.\nHowever, if the result exceeds 10^{18}, print -1 instead.\n\n-----Constraints-----\n - 2 \\leq N \\leq 10^5\n - 0 \\leq A_i \\leq 10^{18}\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 ... A_N\n\n-----Output-----\nPrint the value A_1 \\times ... \\times A_N as an integer, or -1 if the value exceeds 10^{18}.\n\n-----Sample Input-----\n2\n1000000000 1000000000\n\n-----Sample Output-----\n1000000000000000000\n\nWe have 1000000000 \\times 1000000000 = 1000000000000000000.", "starter_code": "", "input_output": "{\"inputs\": [\"2\\n1000000000 1000000000\\n\", \"3\\n101 9901 999999000001\\n\", \"31\\n4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0\\n\"], \"outputs\": [\"1000000000000000000\\n\", \"-1\\n\", \"0\\n\"]}"}
